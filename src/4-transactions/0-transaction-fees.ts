import '@polkadot/api-augment';
import '@polkadot/types-augment';
import { toPlanckUnit, toDecimal, addChainTokens, toDecimalAmount } from '../utils/unitConversions';
import { Keyring } from '@polkadot/api';
import { ApiPromise, WsProvider } from '@polkadot/api';
import * as dotenv from 'dotenv'
import { calculateTransactionFees, fetchAccountInfo } from '../utils/transactionUtils';
dotenv.config()

/**
 * TODO: add your sender account address below
 */
const SENDER_ACCOUNT = '5GEwX4bq8uzehVgdTKfmPrXPU61XoUdqfCZmWxs1tajKz9K8';

/**
 * TODO: add your sender mnemonic below
 */
const SENDER_MNEMONIC = 'cause trip unique fossil hello supreme release know design marriage never filter';

/**
 * TODO: add your receiver account address below
 */
const RECEIVER_ACCOUNT = '5GW83GQ53B3UGAMCyoFeFTJV8GKwU6bDjF3iRksdxtSt8QNU';

// Amount to be transferred from sender account to receiver account
const SENDER_AMOUNT = 0.001;

async function main() {

    const wsProvider = new WsProvider(process.env.WS_URL);
    // Create a new instance of the api
    const api = await ApiPromise.create({ provider: wsProvider, noInitWarn: true });

    /**
    * 1. Retrieve the initial balance of the account and convert it to decimal format
    */
    const account = await fetchAccountInfo(SENDER_MNEMONIC, api);

    //API call to fetch the balance of the account
    let { data } = await api.query.system.account(SENDER_ACCOUNT);

    // planck unit is generated by the chain, so we need to convert it to decimal format
    console.log(`\n Account ${SENDER_ACCOUNT} has a balance of ${toDecimal(data.free, api)}`);


    /**
     * 2. calculate transaction fees for a particular transaction amount while transferring tokens from sender account to receiver account and convert it to decimal format
     * 
     **/
    await calculateTransactionFees(SENDER_AMOUNT, RECEIVER_ACCOUNT, account, api);



    //disconnect from the chain
    api.disconnect();
}



main().catch(console.error);

